{
	"type":"unit",
	"name":"pirate_fighter",
	"faction":"pirates",
	"grade":3,
	"structure":2,
	"shield":0,
	"damage":2,
	"level":2,
	"effects":
	[
		{
			"name":"PENETRATE_SHIELD",
			"icon":"no_shield",
			"rule":"PENETRATE_SHIELD_DESC",
			"script":"
				func on_attack(target):
					var card = Main.cards[self.enemy][target]
					card.structure -= max(self.damage-max(self.damage-card.shield,0),0)"
		},
		{
			"script":"
				func on_bombard(target):
					var card = Main.field[target]
					card.structure -= max(self.damage-max(self.damage-card.shield,0),0)"
		},
	],
	"effectiveness":"
		func estimate_effectiveness(score,position):
			return score+4",
	"file":"pirate_fighters"
}
{
	"type":"unit",
	"name":"stolen_freighter",
	"faction":"pirates",
	"grade":0,
	"structure":1,
	"shield":0,
	"damage":4,
	"level":3,
	"file":"freighter01"
}
{
	"type":"unit",
	"name":"looter",
	"faction":"pirates",
	"grade":2,
	"structure":2,
	"shield":0,
	"damage":2,
	"level":3,
	"effects":
	[
		{
			"name":"PLUNDER",
			"icon":"points_2",
			"rule":"PLUNDER_DESC",
			"script":"
				func on_attack(target):
					Main.player_used_points[self.owner]['pirates'] = max(Main.player_used_points[self.owner]['pirates']-2,0)"
		},
		{
			"script":"
				func on_bombard(target):
					Main.player_used_points[self.owner]['pirates'] = max(Main.player_used_points[self.owner]['pirates']-2,0)"
		},
	],
	"effectiveness":"
		func estimate_effectiveness(score,position):
			return score+4+max(6-Main.points[self.player]['pirates'],0)",
	"file":"looter"
}
{
	"type":"unit",
	"name":"pirate_corvette",
	"faction":"pirates",
	"grade":1,
	"structure":4,
	"shield":0,
	"damage":5,
	"level":4,
	"file":"pirate_corvette"
}
{
	"type":"unit",
	"name":"pirate_carrier",
	"faction":"pirates",
	"grade":1,
	"structure":6,
	"shield":2,
	"damage":9,
	"level":7,
	"file":"pirate_carrier"
}
{
	"type":"effect",
	"name":"booby_trab",
	"faction":"pirates",
	"grade":1,
	"level":3,
	"effects":
	{
		"name":"DIRECT_DAMAGE_4",
		"icon":"damage_4",
		"rule":"DIRECT_DAMAGE_4_DESC",
		"script":"
			func on_use(target):
				var card = Main.cards[self.enemy][target]
				card.structure -= max(4-card.shield,0)
				card.node.add_child(load('res://scenes/effects/booby_trap.tscn').instance())
			func on_use_target1_filter(target,targets):
				return target.shield<4",
		"target":"enemy_unit"
	},
	"effectiveness":"
		func estimate_effectiveness(score,targets):
			score += max(4-targets[0].shield,0)+25*float(targets[0].structure+targets[0].shield<=4)
			return score",
	"file":"booby_trap"
}
{
	"type":"effect",
	"name":"suicide",
	"faction":"pirates",
	"grade":2,
	"level":3,
	"effects":
	[
		{
			"name":"SUICIDE",
			"icon":"death",
			"rule":"SUICIDE_DESC",
			"script":"
				func on_use(ally,target):
					var unit = Main.cards[self.player][ally]
					var card = Main.cards[self.enemy][target]
					var timer = Timer.new()
					card.structure -= unit.structure
					Main.destroy_unit(ally,self.player)
					timer.set_wait_time(0.75)
					timer.set_one_shot(true)
					Main.add_child(timer)
					timer.start()
					yield(timer,'timeout')
					unit.node.move_to = card.node.get_global_position()
				func on_use_target2_filter(target,targets):
					return floor(target.position/Main.POSITIONS)==floor(targets[0]/Main.POSITIONS)",
			"target":["ally_unit","enemy_unit"]
		}
	],
	"effectiveness":"
		func estimate_effectiveness(score,targets):
			score += max(targets[0].structure-targets[1].shield,0)+25*float(targets[1].structure+targets[1].shield<=targets[0].structure)-targets[0].damage-2*targets[0].shield
			return score",
	"file":"suicide"
}
{
	"type":"effect",
	"name":"virus",	
	"faction":"pirates",
	"grade":2,
	"shield":-1,
	"damage":-2,
	"level":3,
	"effects":
	[
		{
			"name":"REDUCE_DMG_2",
			"icon":"attack_down_2",
			"rule":"REDUCE_DMG_2_DESC",
			"script":"
				func on_use(target):
					var card = Main.cards[self.enemy][target]
					card.damage = max(card.damage-2,0)
					card.shield = max(card.shield-1,0)
					card.node.add_child(load('res://scenes/effects/virus.tscn').instance())
				func on_use_target1_filter(target,targets):
					return target.damage>0 || target.shield>0",
			"target":"enemy_unit"
		},
		{
			"name":"JAM_1",
			"icon":"shield_down_1",
			"rule":"JAM_1_DESC"
		}
	],
	"effectiveness":"
		func estimate_effectiveness(score,targets):
			return score+4+2*targets[0].shield",
	"file":"virus"
}
{
	"type":"planet",
	"name":"large_mine_field",
	"faction":"pirates",
	"grade":2,
	"damage":2,
	"level":5,
	"effects":
	{
		"name":"MINES_2",
		"icon":"mines",
		"rule":"MINES_2_PLANET_DESC",
		"script":"
			func on_next_turn(player):
				if (player!=self.owner):
					return
				for target in range(self.position*Main.POSITIONS,(self.position+1)*Main.POSITIONS):
					var card = Main.cards[self.enemy][target]
					if (card!=null):
						card.node.add_child(load('res://scenes/effects/mine.tscn').instance())
						card.structure -= 2"
	},
	"effectiveness":"
		func estimate_effectiveness(score,targets):
			return score+6",
	"file":""
}
